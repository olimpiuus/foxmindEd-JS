(()=>{var e={619:(e,t,i)=>{e.exports=i.p+"imgs/moon-waning-crescent.c3556d440980c942661792fe126a221b.svg"},776:(e,t,i)=>{e.exports=i.p+"imgs/white-balance-sunny.192e78bb875e4f1909eae6d408e72fae.svg"},766:(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>r});var n=i(91),s=i.n(n),o=new URL(i(376),i.b);const r='<!DOCTYPE html> <html lang="en"> <head> <meta charset="UTF-8"/> <meta http-equiv="X-UA-Compatible" content="IE=edge"/> <meta name="viewport" content="width=device-width/ninitial-scale=1"/> <title>Country</title> <link rel="stylesheet" href="'+s()(o)+'"/> </head> <body> <header class="header"> <h1 class="header__title">Where in the world?</h1> <div class="header__btn-mode-block"></div> </header> <main class="countries__container"> <form action="" class="countries__search-form"> <section class="country__search search"> <input class="search__input" type="search" placeholder="Search city" name="city" id="searchLocation"/> <ul class="search__options"></ul> </section> <select class="search__select-region" name="regions" id="sel1"> <option disabled="disabled" selected="selected" value="Initial"> --Please choose a region-- </option> <option value="All">All</option> <option value="Africa">Africa</option> <option value="Americas">Americas</option> <option value="Asia">Asia</option> <option value="Europe">Europe</option> <option value="Oceania">Oceania</option> </select> </form> <div class="countries__list-wrapper"> <ul class="countries__list"></ul> <div class="spinner-wrapper spinner-deactivated"> <div class="spinner"></div> </div> </div> </main> </body> </html> '},91:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),t.hash&&(e+=t.hash),t.maybeNeedQuotes&&/[\t\n\f\r "'=<>`]/.test(e)?'"'.concat(e,'"'):e):e}},111:function(e,t,i){"use strict";var n=this&&this.__awaiter||function(e,t,i,n){return new(i||(i=Promise))((function(s,o){function r(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,a)}c((n=n.apply(e,t||[])).next())}))},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=s(i(269)),r=s(i(955)),a=new class{constructor(){this._getValue=()=>{if("All"===r.default.element.value||"Initial"===r.default.element.value)return o.default.getSearchResults(this.element.value);{const e=this.element.value.split("");return r.default.getSelectedCountries.filter((t=>{let i=!0;const n=t.name.split("");return e.forEach((e=>{const t=n.findIndex((t=>t===e));-1!==t?n.splice(t,1):i=!1})),i})).map((e=>e.name))}},this._addOption=e=>{this.options.insertAdjacentHTML("beforeend",`\n    <div class="search__option">${e}</div>\n  `)},this.clearOptions=()=>this.options.innerHTML="",this._updateDom=()=>n(this,void 0,void 0,(function*(){let e;this.element.addEventListener("keyup",(()=>{e&&clearTimeout(e),e=setTimeout((()=>n(this,void 0,void 0,(function*(){this.clearOptions();try{(yield this._getValue()).forEach((e=>this._addOption(e)))}catch(e){this.clearOptions(),this._addOption("Country not found")}""===this.element.value&&this.clearOptions()}))),500)}))})),this.element=document.querySelector(".search__input"),this.options=document.querySelector(".search__options"),this._updateDom()}};t.default=a},791:function(e,t,i){"use strict";var n=this&&this.__awaiter||function(e,t,i,n){return new(i||(i=Promise))((function(s,o){function r(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,a)}c((n=n.apply(e,t||[])).next())}))},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=s(i(727)),r=s(i(269)),a=s(i(111)),c=s(i(534));(new class{constructor(){this.handler=()=>{document.addEventListener("click",(e=>n(this,void 0,void 0,(function*(){const t=e.target;if(t instanceof HTMLElement){if(t.classList.contains("search__option")){if(!t.textContent||"Country not found"===t.textContent)return;const e=yield r.default.getCountry(t.textContent);o.default.addArrayCountries([e]),a.default.clearOptions(),a.default.element.value=e.name}t.closest(".header__btn-mode-block")&&c.default.changeTheme()}}))))}}}).handler()},937:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e,t,i,n,s){this.name=e,this.population=t,this.region=i,this.capital=n,this.img=s,this.getCountry=()=>this}}},269:function(e,t,i){"use strict";var n=this&&this.__awaiter||function(e,t,i,n){return new(i||(i=Promise))((function(s,o){function r(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,a)}c((n=n.apply(e,t||[])).next())}))},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=s(i(937)),r=new class{constructor(){this._requestByName=e=>n(this,void 0,void 0,(function*(){const t=yield fetch(`https://restcountries.com/v3.1/name/${e}`);return yield t.json()})),this._requestByRegion=e=>n(this,void 0,void 0,(function*(){const t=yield fetch(`https://restcountries.com/v3.1/region/${e}`);return yield t.json()})),this._requestAll=()=>n(this,void 0,void 0,(function*(){const e=yield fetch("https://restcountries.com/v3.1/all");return yield e.json()})),this._getCountryObjFromAnswer=e=>{const{capital:t,name:{official:i},population:n,region:s,flags:{svg:r}}=e;return new o.default(i,n,s,t,r)},this._getCountriesFromRequest=e=>e.map((e=>this._getCountryObjFromAnswer(e))),this.getCountry=e=>n(this,void 0,void 0,(function*(){const t=yield this._requestByName(e);return this._getCountriesFromRequest(t)[0]})),this.getCountiesFromRegionsRequest=e=>n(this,void 0,void 0,(function*(){const t=yield this._requestByRegion(e);return this._getCountriesFromRequest(t)})),this.getSearchResults=e=>n(this,void 0,void 0,(function*(){return(yield this._requestByName(e)).map((e=>e.name.official))})),this.getAllCountries=()=>n(this,void 0,void 0,(function*(){const e=yield this._requestAll();return this._getCountriesFromRequest(e)}))}};t.default=r},727:function(e,t,i){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=n(i(152)),o=new class{constructor(){this.clearList=()=>{this.list.innerHTML=""},this.addCountry=({name:e,population:t,region:i,capital:n,img:s})=>{this.list.insertAdjacentHTML("beforeend",`\n    <li class="countries__country-item country">\n        <img src="${s}" alt="" class="country__flag">\n        <div class="country__description">\n            <h3 class="country__title">${e}</h3>\n            <p class="country__info"><b>Population: </b>${t}</p>\n            <p class="country__info"><b>Region:</b> ${i}</p>\n            <p class="country__info"><b>Capital:</b> ${n}</p>\n        </div>\n    </li>`)},this.addArrayCountries=e=>{s.default.activate(),this.clearList(),this.list.style.display="none",e.forEach((e=>this.addCountry(e))),setTimeout((()=>{s.default.deactivate()}),500),this.list.style.display="grid"},this.list=document.querySelector(".countries__list")}};t.default=o},955:function(e,t,i){"use strict";var n=this&&this.__awaiter||function(e,t,i,n){return new(i||(i=Promise))((function(s,o){function r(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,a)}c((n=n.apply(e,t||[])).next())}))},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=s(i(269)),r=s(i(727)),a=new class{constructor(){this._selectListener=()=>{this.element.addEventListener("change",(()=>n(this,void 0,void 0,(function*(){this._selectChoice=this.element.value,"All"===this._selectChoice?this.getSelectedCountries=yield o.default.getAllCountries():this.getSelectedCountries=yield o.default.getCountiesFromRegionsRequest(this._selectChoice),r.default.addArrayCountries(this.getSelectedCountries)}))))},this.element=document.querySelector(".search__select-region"),this._selectChoice=null,this.getSelectedCountries=[],this._selectListener()}};t.default=a},152:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=new class{constructor(){this.activate=()=>{this.element.classList.remove("spinner-deactivated"),this.element.classList.add("spinner-active")},this.deactivate=()=>{this.element.classList.remove("spinner-active"),this.element.classList.add("spinner-deactivated")},this.element=document.querySelector(".spinner-wrapper")}};t.default=i},534:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=new class{constructor(){this._renderDark=()=>{this.element.innerHTML=`<img class="header__btn-img" src="${this.img.sun}" alt="">\n      <button class="header__btn-mode">Light Mode</button>`},this._renderLight=()=>{this.element.innerHTML=`<img class="header__btn-img" src="${this.img.moon}" alt="">\n      <button class="header__btn-mode">Dark Mode</button>`},this._renderBtn=()=>{"dark"===this._customerTheme?this._renderDark():this._renderLight()},this._initialize=()=>{document.documentElement.setAttribute("data-theme",this._customerTheme),this._renderBtn()},this.changeTheme=()=>{let e;e="light"===this._customerTheme?"dark":"light",document.documentElement.setAttribute("data-theme",e),this._customerTheme=e,n._renderBtn()},this.element=document.querySelector(".header__btn-mode-block"),this.img={sun:i(776),moon:i(619)},this._customerTheme=window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light",this._initialize()}};t.default=n},376:(e,t,i)=>{"use strict";e.exports=i.p+"css/style.css"}},t={};function i(n){var s=t[n];if(void 0!==s)return s.exports;var o=t[n]={exports:{}};return e[n].call(o.exports,o,o.exports,i),o.exports}i.m=e,i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;i.g.importScripts&&(e=i.g.location+"");var t=i.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e})(),i.b=document.baseURI||self.location.href,(()=>{"use strict";i(766),i(791)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,